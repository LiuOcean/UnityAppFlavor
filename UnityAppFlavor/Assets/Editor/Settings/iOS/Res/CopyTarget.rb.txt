#!/usr/bin/env ruby

require 'rubygems'
require 'xcodeproj'
require 'json'

def copy_target(proj, name, from_name)
  src_target = proj.targets.find { |item| item.to_s == from_name}

  # remove target if exist
  proj.targets.each do |item|
    if item.to_s == name
      proj.targets.delete(item)
      puts "[Xcode] [#{name}] delete target"
    end
  end

  # create target
  target = proj.new_target(src_target.symbol_type, name, src_target.platform_name, src_target.deployment_target)
  target.product_name = name
  
  puts "[Xcode] [#{name}] create target"

  # create scheme
  scheme = Xcodeproj::XCScheme.new
  scheme.add_build_target(target)
  scheme.set_launch_target(target)
  scheme.save_as(proj.path, name)
  
  puts "[Xcode] [#{name}] create scheme"

  # copy build_configurations
  target.build_configurations.map do |item|
    item.build_settings.update(src_target.build_settings(item.name))
  end

  puts "[Xcode] [#{name}] copy build_configurations"
  
  # copy build_phases
  phases = src_target.build_phases.reject { |x| x.instance_of? Xcodeproj::Project::Object::PBXShellScriptBuildPhase }.collect(&:class)
  
  phases.each do |klass|
    src = src_target.build_phases.find { |x| x.instance_of? klass }
    dst = target.build_phases.find { |x| x.instance_of? klass }
    unless dst
      dst ||= proj.new(klass)
      target.build_phases << dst
    end
    dst.files.map { |x| x.remove_from_project }
  
    src.files.each do |f|
      file_ref = proj.new(Xcodeproj::Project::Object::PBXFileReference)
      file_ref.name = f.file_ref.name
      file_ref.path = f.file_ref.path
      file_ref.source_tree = f.file_ref.source_tree
      file_ref.last_known_file_type = f.file_ref.last_known_file_type
      file_ref.fileEncoding = f.file_ref.fileEncoding
      begin
        file_ref.move(f.file_ref.parent)
      rescue
      end
    
      build_file = proj.new(Xcodeproj::Project::Object::PBXBuildFile)
      build_file.file_ref = f.file_ref
      dst.files << build_file
    end
  end
  puts "[Xcode] [#{name}] copy build_phases"
  return target
end

def add_embed_frameworks(proj, target, lib)
  embed_frameworks_build_phase = proj.new(Xcodeproj::Project::Object::PBXCopyFilesBuildPhase)
  embed_frameworks_build_phase.name = 'Embed Frameworks'
  embed_frameworks_build_phase.symbol_dst_subfolder_spec = :frameworks
  target.build_phases << embed_frameworks_build_phase
  
  build_file = embed_frameworks_build_phase.add_file_reference(lib.product_reference, true)
  target.frameworks_build_phases.add_file_reference(lib.product_reference, true)
  build_file.settings = { 'ATTRIBUTES' => ['CodeSignOnCopy', 'RemoveHeadersOnCopy'] }  

  puts "[XCode] [Embed] add #{lib.name} to #{target.name}"
end

input_array = ARGV

target_name = input_array[0]

proj = Xcodeproj::Project.open("Unity-iPhone.xcodeproj")

# print JSON.dump proj.pretty_print

app = copy_target(proj, target_name, "Unity-iPhone")
lib = copy_target(proj, "#{target_name}-UnityFramework", "UnityFramework")

add_embed_frameworks(proj, app, lib)

proj.save
puts "[Xcode] all done"